tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2[!(tickets2 %in% good.num)] <- NA
View(tickets2)
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
View(tickets2)
tickets2[!(tickets2 %in% as.character(good.num))] <- NA
View(tickets2)
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F) %>%
as.numeric()
tickets2 <- as.data.frame(sapply(tickets2, as.numeric))
tickets2[!(tickets2 %in% good.num)] <- NA
tickets2 %in% good.num
good.num
View(tickets2)
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- as.data.frame(sapply(tickets2, as.numeric))
tickets2[1,1] %in% good.num
tickets2 %in% good.num
typeof(tickets2)
rm(list = ls())
library(dplyr)
options(scipen = 100, digits = 4)
input  <- fread('input/Input_day16.txt', sep = ",", header = FALSE, fill = TRUE)
one <- unlist(str_split(input[26, "V1"], pattern = ","))
tickets <- as.data.frame(input[26:nrow(input), "V1"], stringsasfactors = F) %>%
separate(unlist(V1), sep = ",", into = paste0("R",(1:length(one))))
mine <- unlist(str_split(input[23, "V1"], pattern = ","))
Rules <- as.data.frame(input[1:20, "V1"], stringsasfactors = F) %>%
separate(V1, sep = ": |-| or ", into = paste0("R",(1:5))) %>%
mutate(R2 = as.numeric(R2),
R3 = as.numeric(R3),
R4 = as.numeric(R4),
R5 = as.numeric(R5))
colnames(Rules) <- c("rule", "min1", "max1", "min2", "max2")
good.num <- c()
for(i in 1:nrow(Rules)){
good.num <- c(Rules[i, "min1"]:Rules[i, "max1"],
Rules[i, "min2"]:Rules[i, "max2"], good.num)
}
good.num <- unique(good.num)
wrong <- sum(as.numeric(unlist(tickets)[!(unlist(tickets) %in% as.character(good.num))]))
wrong
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- as.data.frame(sapply(tickets2, as.numeric))
View(tickets2)
typeof(tickets2)
class(tickets2)
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- sapply(tickets2, as.numeric)
tickets2[!(tickets2 %in% good.num))] <- NA
tickets2[!(tickets2 %in% good.num)] <- NA
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- sapply(tickets2, as.numeric)
View(tickets)
tickets2[!(tickets2 %in% good.num)] <- NA
View(tickets2)
tickets2 <- data.frame(sapply(tickets2, as.numeric))
tickets2[!(tickets2 %in% good.num)] <- NA
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets2, as.numeric))
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets2, as.numeric))
View(tickets2)
tickets2 <- data.frame(sapply(tickets, as.numeric))
View(tickets2)
#Quest2
tickets2[!(tickets2 %in% good.num)] <- NA
View(tickets2)
View(tickets)
tickets2 <- data.frame(sapply(tickets, as.numeric))
tickets2[!(tickets2 %in% good.num)] <- NA
View(tickets2)
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.numeric))
tickets2[!(tickets2 %in% good.num)] <- NA
View(tickets2)
(tickets2 %in% good.num)
tickets2[!(tickets2[] %in% good.num)] <- NA
data.frame(lapply([!(tickets2 %in% good.num)])) <- NA
data.frame(lapply([!(tickets2 %in% good.num)]) <- NA
data.frame(lapply([!(tickets2 %in% good.num)])) <- NA
data.frame(lapply(tickets2[!(tickets2 %in% good.num)])) <- NA
lapply(tickets2[!(tickets2 %in% good.num)]
)
lapply(tickets2[!(tickets2 %in% good.num)], NA)
tickets2[!(tickets2[,] %in% good.num)] <- NA
View(tickets2)
tickets2[,] %in% good.num
tickets2[!(x %in% good.num), x := NA]
options(scipen = 100, digits = 4)
library("data.table")
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.numeric))
lapply(tickets2[!(tickets2 %in% good.num)], NA)
tickets2[!(x %in% good.num), x := NA]
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.numeric))
tickets2[!(x %in% good.num), x := NA]
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.numeric))
View(tickets2)
typeof(tickets2[1,1])
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.integer))
typeof(tickets2[1,1])
tickets2[!(tickets2[,] %in% good.num)] <- NA
View(tickets2)
tickets2 %in% good.num
tickets2 == 0
tickets2[!(tickets2 == 0),] <- NA
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.integer))
tickets2[!(tickets2 %in% good.num),] <- NA
tickets2[!(all(tickets2 %in% good.num)),] <- NA
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.integer))
tickets2[!(all(tickets2 %in% good.num)),] <- NA
View(tickets2)
i <- 1
tickets[i,]
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.integer))
for(i in 1:nrow(tickets2)){
tickets[i,] <- ifelse(all(tickets[i,] %in% good.num), tickets[i,], NA)
}
View(tickets2)
rm(list = ls())
library(dplyr)
library("data.table")
options(scipen = 100, digits = 4)
input  <- fread('input/Input_day16.txt', sep = ",", header = FALSE, fill = TRUE)
one <- unlist(str_split(input[26, "V1"], pattern = ","))
tickets <- as.data.frame(input[26:nrow(input), "V1"], stringsasfactors = F) %>%
separate(unlist(V1), sep = ",", into = paste0("R",(1:length(one))))
mine <- unlist(str_split(input[23, "V1"], pattern = ","))
Rules <- as.data.frame(input[1:20, "V1"], stringsasfactors = F) %>%
separate(V1, sep = ": |-| or ", into = paste0("R",(1:5))) %>%
mutate(R2 = as.numeric(R2),
R3 = as.numeric(R3),
R4 = as.numeric(R4),
R5 = as.numeric(R5))
colnames(Rules) <- c("rule", "min1", "max1", "min2", "max2")
good.num <- c()
for(i in 1:nrow(Rules)){
good.num <- c(Rules[i, "min1"]:Rules[i, "max1"],
Rules[i, "min2"]:Rules[i, "max2"], good.num)
}
good.num <- unique(good.num)
wrong <- sum(as.numeric(unlist(tickets)[!(unlist(tickets) %in% as.character(good.num))]))
wrong
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets2 <- data.frame(sapply(tickets, as.integer))
for(i in 1:nrow(tickets2)){
tickets2[i,] <- ifelse(all(tickets2[i,] %in% good.num), tickets2[i,], NA)
}
View(tickets2)
tickets3 <- tickets2 %>%
na.omit()
View(Rules)
rul <- c()
for(i in 1:nrow(Rules)){
range <- c(Rules[i, "min1"]:Rules[i, "max1"], Rules[i, "min2"]:Rules[i, "max2"])
rul[Rules$rule[i]] <- range
}
rul
range <- c(Rules[i, "min1"]:Rules[i, "max1"], Rules[i, "min2"]:Rules[i, "max2"])
rul[Rules$rule[i]] <- range
rul[Rules$rule[i]] <- list(range)
View(rul)
rul <- c()
for(i in 1:nrow(Rules)){
range <- c(Rules[i, "min1"]:Rules[i, "max1"], Rules[i, "min2"]:Rules[i, "max2"])
rul[Rules$rule[i]] <- list(range)
}
View(rul)
1:length(rul)
names(rul)[1]
names(rul)[2]
tick <- tickets2 %>%
na.omit()
ans.df <- data.frame(NA, nrow = ncol(tick), ncol = length(rul))
View(ans.df)
ans.df <- data.frame(nrow = ncol(tick), ncol = length(rul))
View(ans.df)
View(Rules)
Rules[i, 5+k] <- NA
k <- 1
Rules[i, 5+k] <- NA
View(Rules)
rul[[i]]
i
for(i in 1:length(rul)){
names(rul)[i]
rn <- rul[[i]]
for(k in 1:ncol(tick)){
Rules[i, 5+k] <- ifelse(all(tick[,k] %in% rn), 1, 0)
}
}
View(Rules)
for(i in 1:length(rul)){
names(rul)[i]
rn <- rul[[i]]
for(k in 1:ncol(tick)){
Rules[i, 5+k] <- ifelse(all(unlist(tick[,k]) %in% rn), 1, 0)
}
}
Rules[i, 5+k]
tick[,k]
View(tick)
View(tickets)
View(tickets3)
View(tickets2)
View(tickets)
View(tickets2)
#Quest2
tickets2 <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
View(tickets2)
tickets2 <- data.frame(sapply(tickets, as.integer))
tickets2[i,]
all(tickets2[i,] %in% good.num)
tickets2[i,]
for(i in 1:nrow(tickets2)){
tickets2[i,] <- ifelse(all(tickets2[i,] %in% good.num), unlist(tickets2[i,]), NA)
}
case1 <- complete.cases(tickets2)
tick <- tickets %>%
filter(case1)
View(tick)
#Quest2
tickets <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets <- data.frame(sapply(tickets, as.integer))
#Quest2
tickets <- data.frame(sapply(tickets, as.integer))
View(tickets)
tickets2 <- tickets
for(i in 1:nrow(tickets2)){
tickets2[i,] <- ifelse(all(tickets2[i,] %in% good.num), unlist(tickets2[i,]), NA)
}
case1 <- complete.cases(tickets2)
tick <- tickets %>%
filter(case1)
tick <- tickets %>%
filter(!case1)
#Quest2
tickets <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets <- data.frame(sapply(tickets, as.integer))
tickets2 <- tickets
for(i in 1:nrow(tickets2)){
tickets2[i,] <- ifelse(all(tickets2[i,] %in% good.num), unlist(tickets2[i,]), NA)
}
case1 <- complete.cases(tickets2)
tick <- tickets %>%
filter(!case1)
#Quest2
tickets <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets <- data.frame(sapply(tickets, as.integer))
tickets2 <- tickets
for(i in 1:nrow(tickets2)){
tickets2[i,] <- ifelse(all(tickets2[i,] %in% good.num), unlist(tickets2[i,]), NA)
}
case1 <- complete.cases(tickets2)
tick <- tickets %>%
filter(case1)
case1
View(tickets)
rm(list = ls())
library(dplyr)
library("data.table")
options(scipen = 100, digits = 4)
input  <- fread('input/Input_day16.txt', sep = ",", header = FALSE, fill = TRUE)
one <- unlist(str_split(input[26, "V1"], pattern = ","))
tickets <- as.data.frame(input[26:nrow(input), "V1"], stringsasfactors = F) %>%
separate(unlist(V1), sep = ",", into = paste0("R",(1:length(one))))
mine <- unlist(str_split(input[23, "V1"], pattern = ","))
Rules <- as.data.frame(input[1:20, "V1"], stringsasfactors = F) %>%
separate(V1, sep = ": |-| or ", into = paste0("R",(1:5))) %>%
mutate(R2 = as.numeric(R2),
R3 = as.numeric(R3),
R4 = as.numeric(R4),
R5 = as.numeric(R5))
colnames(Rules) <- c("rule", "min1", "max1", "min2", "max2")
good.num <- c()
for(i in 1:nrow(Rules)){
good.num <- c(Rules[i, "min1"]:Rules[i, "max1"],
Rules[i, "min2"]:Rules[i, "max2"], good.num)
}
good.num <- unique(good.num)
wrong <- sum(as.numeric(unlist(tickets)[!(unlist(tickets) %in% as.character(good.num))]))
wrong
#Quest2
# tickets <- data.frame(matrix(unlist(tickets), nrow=length(tickets), byrow=T), stringsAsFactors = F)
tickets <- data.frame(sapply(tickets, as.integer))
tickets2 <- tickets
for(i in 1:nrow(tickets2)){
tickets2[i,] <- ifelse(all(tickets2[i,] %in% good.num), unlist(tickets2[i,]), NA)
}
case1 <- complete.cases(tickets2)
tick <- tickets %>%
filter(case1)
rul <- c()
for(i in 1:nrow(Rules)){
range <- c(Rules[i, "min1"]:Rules[i, "max1"], Rules[i, "min2"]:Rules[i, "max2"])
rul[Rules$rule[i]] <- list(range)
}
for(i in 1:length(rul)){
names(rul)[i]
rn <- rul[[i]]
for(k in 1:ncol(tick)){
Rules[i, 5+k] <- ifelse(all(unlist(tick[,k]) %in% rn), 1, 0)
}
}
View(Rules)
rr <- summarise(sum)
rr <- summarise()
RR <- Rules %>%
mutate(SU = sum(6:ncol(Rules)))
View(RR)
RR <- Rules %>%
mutate(SU = sum(Rules[,6:ncol(Rules)]))
for (i in nrow(Rules)){
Rules[i,"SU"] <- sum(Rules[i,6:ncol(Rules)])
}
View(Rules)
Rules[i,"SU"]
View(Rules)
for (i in 1:nrow(Rules)){
Rules[i,"SU"] <- sum(Rules[i,6:ncol(Rules)])
}
i <- 1
sum(Rules[i,6:ncol(Rules)])
Rules[i,6:ncol(Rules)]
for (i in 1:nrow(Rules)){
Rules[i,"SU"] <- sum(Rules[i,6:(ncol(Rules)-1)])
}
for(i in 1:length(rul)){
rn <- rul[[i]]
for(k in 1:ncol(tick)){
Rules[i, 5+k] <- ifelse(all(unlist(tick[,k]) %in% rn), names(rul)[i], 0)
}
}
names(rul)[1]
count(Rules == r)
r <- names(rul)[1]
count(Rules == r)
Rules[Rules == 0] <- NA
poss <- Rules[,6:(ncol(Rules)-1)]
View(poss)
c <- ncol(poss)
c <- ncol(poss)
c <- colname(poss)
c <- colnames(poss)
c
c <- 1
count(!is.na(poss[, c]))
poss[,c]
!is.na(poss[,c])
count(as.numeric(!is.na(poss[,c]))) == 1
count(as.numeric(!is.na(poss[,c])))
sum(!is.na(poss[,c]))
for(c in 1:ncol(poss)){
if(sum(!is.na(poss[,c])) == 1){
print(c)
}
}
for(c in 1:ncol(poss)){
if(sum(!is.na(poss[,c])) == 1){
print(c)
}
}
!is.na(poss[,c]))
!is.na(poss[,c])
c <- 10
!is.na(poss[,c])
poss[!is.na(poss[,c])]
c <- 10
!is.na(poss[,c])
poss[!is.na(poss[,c])]
rrr <- sort(Rules$rule, by = Rule$SU)
rrr <- sort(by = Rule$SU)
rrr <- sort(by = Rules$SU)
rrr <- sort(Rules$rule, by = Rules$SU)
rrr <- sort(Rules$SU)
rrr
View(Rules)
Ru <- Rules
Ru <- Rules
Ru$SU <- Ru$SU - 1
Ru$SU <- Ru$SU - 1
Ru$SU <- Ru$SU - 1
Ru$SU <- Ru$SU - 1
Ru$SU <- Ru$SU - 1
View(Ru)
which(!is.na(Ru[c,]))
c
Ru[c,]
nm <- unlist(Ru[c,which(!is.na(Ru[c,]))])
c <- 10
(Ru$SU[c] == 1)
for(c in 1:nrow(poss)){
if(Ru$SU[c] == 1){
Ru$SU <- Ru$SU - 1
nm <- unlist(Ru[c, which(!is.na(Ru[c,]))])
name.list[[]]
}
}
for(c in 1:nrow(poss)){
if(Ru$SU[c] == 1){
Ru$SU <- Ru$SU - 1
nm <- Rules[c, "rule"]
print(nm)
}
}
for(n in 1:20){
for(c in 1:nrow(poss)){
if(Ru$SU[c] == 1){
Ru$SU <- Ru$SU - 1
nm <- Rules[c, "rule"]
print(nm)
}
}
}
ans.list <- c()
Ru <- Rules
for(n in 1:20){
for(c in 1:nrow(poss)){
if(Ru$SU[c] == 1){
Ru$SU <- Ru$SU - 1
nm <- Rules[c, "rule"]
print(nm)
ans.list[[nm]] <- colnames(tick)[which(!is.na(Ru[c,]))]
}
}
}
View(ans.list)
View(Ru)
which(!is.na(Ru[c,]))
Ru[c,]
c <- 10
Ru[c,]
!is.na(Ru[c,])
which(!is.na(Ru[c,]))
ans.list <- c()
Ru <- Rules
c <- 10
Ru$SU[c] == 1
c <- 11
Ru$SU[c] == 1
Ru$SU <- Ru$SU - 1
nm <- Rules[c, "rule"]
print(nm)
cn <- which(!is.na(Ru[c,]))
cn <- which(!is.na(Ru[c,6:(length(Ru-1))]))
cn <- which(!is.na(Ru[c,6:(ncol(Ru)-1)]))
ans.list[[nm]] <- cn
View(Ru)
Ru[,cn+5] <- NA
View(Ru)
Rules[Rules == 0] <- NA
poss <- Rules[,6:(ncol(Rules)-1)]
ans.list <- c()
Ru <- Rules
for(n in 1:20){
for(c in 1:nrow(poss)){
if(Ru$SU[c] == 1){
Ru$SU <- Ru$SU - 1
nm <- Rules[c, "rule"]
print(nm)
cn <- which(!is.na(Ru[c,6:(ncol(Ru)-1)]))
ans.list[[nm]] <- cn
Ru[,cn+5] <- NA
}
}
}
ans.list
ans.l <- sort(ans.list)
ans.l
colnames(tick) <- names(ans.l)
View(tick)
which(grepl(names(ans.l), "departure"))
grepl(names(ans.l), "departure")
which(grepl("departure", names(ans.l)))
mine[which(grepl("departure", names(ans.l)))]
as.integer(mine[which(grepl("departure", names(ans.l)))])
ans2 <- sum(as.integer(mine[which(grepl("departure", names(ans.l)))]))
ans2
ans l
ans.l
as.integer(mine[which(grepl("departure", names(ans.l)))])
mine
ans2 <- sum(as.integer(mine[which(grepl("departure", names(ans.l)))]))
ans2
ans2 <- prod(as.integer(mine[which(grepl("departure", names(ans.l)))]))
ans2
